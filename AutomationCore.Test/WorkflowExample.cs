using AutomationCore.Features.Workflows;
using AutomationCore.Core.Models;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;

namespace AutomationCore.Test;

/// <summary>
/// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è workflow —Å –ø–æ–º–æ—â—å—é WorkflowBuilder
/// </summary>
public static class WorkflowExample
{
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π workflow –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–Ω–æ—Ç–∞
    /// </summary>
    public static async Task RunNotepadWorkflowExample(IServiceProvider services, ILogger logger)
    {
        logger.LogInformation("üé≠ Starting Workflow Builder example");

        try
        {
            var workflowBuilder = services.GetRequiredService<WorkflowBuilder>();

            // –°–æ–∑–¥–∞–µ–º workflow –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–Ω–æ—Ç–æ–º
            var workflow = workflowBuilder
                .StartWorkflow("Notepad Automation Demo")
                .AddDelay(1000) // –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
                .AddCustomAction(async (context) =>
                {
                    logger.LogInformation("üöÄ Custom action: Starting Notepad process");

                    var process = System.Diagnostics.Process.Start("notepad.exe");
                    if (process != null)
                    {
                        logger.LogInformation("‚úÖ Notepad started successfully");
                        context.SetVariable("NotepadProcess", process);
                    }
                    else
                    {
                        throw new Exception("Failed to start Notepad");
                    }
                }, "Start Notepad")
                .AddDelay(2000) // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                .AddCustomAction(async (context) =>
                {
                    logger.LogInformation("‚å®Ô∏è Custom action: Typing text in Notepad");

                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WindowAutomator –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
                    // –Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–º–∏—Ç–∞—Ü–∏—é
                    await Task.Delay(500);
                    logger.LogInformation("‚úÖ Text typing simulated");
                }, "Type Text")
                .Build();

            // –í—ã–ø–æ–ª–Ω—è–µ–º workflow
            logger.LogInformation("‚ñ∂Ô∏è Executing workflow: {Name}", workflow.Name);
            var result = await workflow.ExecuteAsync();

            if (result.Success)
            {
                logger.LogInformation("‚úÖ Workflow completed successfully");
                logger.LogInformation("üìä Steps executed: {StepCount}", result.ExecutedSteps.Count);
                logger.LogInformation("‚è±Ô∏è Total execution time: {Duration:F2}s", result.ExecutionTime.TotalSeconds);
            }
            else
            {
                logger.LogError("‚ùå Workflow failed: {Error}", result.Error);
                if (result.FailedStep != null)
                {
                    logger.LogError("üí• Failed at step: {StepName}", result.FailedStep.Name);
                }
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "‚ùå Error during workflow example");
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ—Ä –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ workflow —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ —Ü–∏–∫–ª–∞–º–∏
    /// </summary>
    public static async Task RunAdvancedWorkflowExample(IServiceProvider services, ILogger logger)
    {
        logger.LogInformation("üé™ Starting Advanced Workflow example");

        try
        {
            var workflowBuilder = services.GetRequiredService<WorkflowBuilder>();

            var workflow = workflowBuilder
                .StartWorkflow("Advanced Automation Demo")
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                .AddCustomAction(async (context) =>
                {
                    context.SetVariable("Counter", 0);
                    context.SetVariable("MaxRetries", 3);
                    logger.LogInformation("üîß Workflow variables initialized");
                }, "Initialize")

                // –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
                .AddConditionalStep(
                    condition: (context) =>
                    {
                        var counter = (int)context.Variables.GetValueOrDefault("Counter", 0);
                        var maxRetries = (int)context.Variables.GetValueOrDefault("MaxRetries", 3);
                        return counter < maxRetries;
                    },
                    trueBranch: builder => builder
                        .AddCustomAction(async (context) =>
                        {
                            var counter = (int)context.Variables.GetValueOrDefault("Counter", 0);
                            counter++;
                            context.SetVariable("Counter", counter);
                            logger.LogInformation("üîÑ Retry attempt: {Counter}", counter);

                            // –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
                            if (counter < 2)
                            {
                                throw new Exception($"Simulated failure on attempt {counter}");
                            }
                        }, "Retry Operation"),
                    falseBranch: builder => builder
                        .AddCustomAction(async (context) =>
                        {
                            logger.LogInformation("‚è≠Ô∏è Max retries exceeded, skipping");
                        }, "Skip Operation")
                )

                // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
                .AddCustomAction(async (context) =>
                {
                    var finalCounter = (int)context.Variables.GetValueOrDefault("Counter", 0);
                    logger.LogInformation("üèÅ Workflow completed with {Counter} attempts", finalCounter);
                }, "Finalize")

                .Build();

            // –í—ã–ø–æ–ª–Ω—è–µ–º workflow —Å retry –ª–æ–≥–∏–∫–æ–π
            var result = await workflow.ExecuteAsync(retryCount: 2);

            logger.LogInformation("üìà Advanced workflow result: {Success}", result.Success);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "‚ùå Error during advanced workflow example");
        }
    }
}