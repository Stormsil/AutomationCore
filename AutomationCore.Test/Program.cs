using System.Diagnostics;

namespace AutomationCore.Test;

class Program
{
    static async Task Main(string[] args)
    {
        Console.WriteLine("üöÄ AutomationCore Demo Application");
        Console.WriteLine("===================================");
        Console.WriteLine("This is a simple demonstration of AutomationCore capabilities.\n");

        try
        {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Assets –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            var assetsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Assets");
            Directory.CreateDirectory(assetsPath);

            Console.WriteLine($"üìÅ Assets folder: {assetsPath}");
            Console.WriteLine("‚ÑπÔ∏è  Place your image templates (PNG files) in the Assets folder for future demos\n");

            // –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            await RunSimpleAutomationDemo();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }

        Console.WriteLine("\n‚úÖ Demo completed. Press any key to exit...");
        Console.ReadKey();
    }

    private static async Task RunSimpleAutomationDemo()
    {
        Console.WriteLine("üé¨ Starting simple automation demo");
        Console.WriteLine();

        try
        {
            // 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ë–ª–æ–∫–Ω–æ—Ç
            Console.WriteLine("üìù Step 1: Opening Notepad...");
            var notepadProcess = Process.Start("notepad.exe");

            if (notepadProcess == null)
            {
                Console.WriteLine("‚ùå Failed to start Notepad");
                return;
            }

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Notepad
            Console.WriteLine("‚è≥ Waiting for Notepad to load...");
            await Task.Delay(3000);
            Console.WriteLine("‚úÖ Notepad should now be open!");

            // 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–∫–æ–Ω —á–µ—Ä–µ–∑ WinAPI
            Console.WriteLine("\nüîç Step 2: Demonstrating window enumeration...");
            await DemonstrateWindowEnumeration();

            // 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–º—É–ª—è—Ü–∏–∏ –≤–≤–æ–¥–∞
            Console.WriteLine("\n‚å®Ô∏è Step 3: Demonstrating input simulation...");
            Console.WriteLine("üìù Click on Notepad window and wait 5 seconds for auto-typing...");

            await Task.Delay(5000); // –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ Notepad

            await SimulateTextInput();

            Console.WriteLine("\nüéâ Basic automation demo completed!");
            Console.WriteLine("üìù Check Notepad to see if text was typed automatically!");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error during automation demo: {ex.Message}");
        }
    }

    private static async Task DemonstrateWindowEnumeration()
    {
        try
        {
            Console.WriteLine("ü™ü Enumerating Windows using WinAPI:");

            // –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å WinAPI
            var processes = Process.GetProcesses()
                .Where(p => !string.IsNullOrEmpty(p.MainWindowTitle))
                .Take(10)
                .ToList();

            Console.WriteLine($"Found {processes.Count} processes with windows:");

            foreach (var process in processes)
            {
                Console.WriteLine($"   üì± {process.MainWindowTitle} (PID: {process.Id})");
            }

            // –ò—â–µ–º Notepad
            var notepadProcesses = processes.Where(p =>
                p.ProcessName.Contains("notepad", StringComparison.OrdinalIgnoreCase)).ToList();

            if (notepadProcesses.Any())
            {
                Console.WriteLine($"‚úÖ Found {notepadProcesses.Count} Notepad instance(s)");
            }
            else
            {
                Console.WriteLine("‚ùå No Notepad processes found with windows");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è Error in window enumeration: {ex.Message}");
        }

        await Task.Delay(1000); // Small delay for readability
    }

    private static async Task SimulateTextInput()
    {
        try
        {
            Console.WriteLine("‚å®Ô∏è Simulating text input...");

            // –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ SendKeys (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ)
            var currentTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            var testText = $"AutomationCore Demo - {currentTime}\r\n\r\n" +
                          "This text was automatically typed by the AutomationCore demo!\r\n\r\n" +
                          "Features that WILL be available once fully integrated:\r\n" +
                          "‚úÖ Process automation\r\n" +
                          "‚úÖ Advanced window management\r\n" +
                          "‚úÖ Precise input simulation\r\n" +
                          "‚úÖ Image recognition and template matching\r\n" +
                          "‚úÖ Workflow automation\r\n\r\n" +
                          "AutomationCore architecture is ready! üöÄ";

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π SendKeys –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            System.Windows.Forms.SendKeys.SendWait(testText);

            Console.WriteLine("‚úÖ Text input simulation completed!");
            Console.WriteLine("üìù Text should appear in the active window (Notepad)");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è Could not simulate input: {ex.Message}");
            Console.WriteLine("üí° Make sure Notepad window is active and focused");
        }

        await Task.Delay(1000);
    }
}
